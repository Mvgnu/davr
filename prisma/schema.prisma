generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                     @id @default(cuid())
  name                  String?
  email                 String?                    @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole                   @default(USER)
  isAdmin               Boolean                    @default(false) // Deprecated: use role field
  created_at            DateTime                   @default(now())
  updated_at            DateTime                   @updatedAt
  accounts              Account[]
  listings              MarketplaceListing[]
  recyclingCenters      RecyclingCenter[]
  claims                RecyclingCenterClaim[]
  reviewedClaims        RecyclingCenterClaim[]     @relation("ClaimReviewer")
  reviews               Review[]
  sessions              Session[]
  buyerNegotiations     Negotiation[]              @relation("BuyerNegotiations")
  sellerNegotiations    Negotiation[]              @relation("SellerNegotiations")
  offerCounters         OfferCounter[]
  negotiationStatusLogs NegotiationStatusHistory[]

  @@index([role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RecyclingCenter {
  id                  String                 @id @default(cuid())
  name                String
  address_street      String?
  city                String?
  postal_code         String?
  latitude            Float?
  longitude           Float?
  phone_number        String?
  website             String?
  created_at          DateTime               @default(now())
  updated_at          DateTime               @updatedAt
  slug                String?                @unique
  address_details     String?
  country             String?                @default("Germany")
  description         String?
  email               String?                @unique
  managedById         String?
  verification_status VerificationStatus     @default(PENDING)
  image_url           String?
  managedBy           User?                  @relation(fields: [managedById], references: [id])
  claims              RecyclingCenterClaim[]
  offers              RecyclingCenterOffer[]
  reviews             Review[]
  working_hours       WorkingHours[]

  @@index([city])
  @@index([managedById])
}

model Material {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  slug             String   @unique
  parent_id        String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  image_url        String?
  journeyStepsJson Json?    @default("[]")

  // NEW FIELDS for enhanced UX
  recyclability_percentage Int? // 0-100, how recyclable this material is
  recycling_difficulty     RecyclingDifficulty? // EASY, MEDIUM, HARD
  category_icon            String? // Icon identifier (e.g., "metal", "paper", "plastic")
  environmental_impact     Json? // { co2_saved_per_kg, energy_saved_percentage, water_saved_liters }
  preparation_tips         Json? // Array of tip objects: [{ title, description, icon }]
  acceptance_rate          Int? // Percentage of centers that accept this (can be computed)
  average_price_per_unit   Float? // Cached average from offers
  price_unit               String? // e.g., "kg", "tonne", "unit"
  fun_fact                 String? // Interesting fact about this material
  annual_recycling_volume  Float? // Global or national recycling volume in tonnes/year

  listings MarketplaceListing[]
  parent   Material?              @relation("MaterialHierarchy", fields: [parent_id], references: [id])
  children Material[]             @relation("MaterialHierarchy")
  offers   RecyclingCenterOffer[]

  @@index([recyclability_percentage])
  @@index([recycling_difficulty])
  @@index([category_icon])
}

model RecyclingCenterOffer {
  id                  String          @id @default(cuid())
  recycling_center_id String
  material_id         String
  price_per_unit      Float?
  unit                String?
  notes               String?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  material            Material        @relation(fields: [material_id], references: [id], onDelete: Cascade)
  recyclingCenter     RecyclingCenter @relation(fields: [recycling_center_id], references: [id], onDelete: Cascade)

  @@unique([recycling_center_id, material_id])
}

model MarketplaceListing {
  id                String        @id @default(cuid())
  title             String
  description       String?
  quantity          Float?
  unit              String?
  location          String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  material_id       String?
  seller_id         String
  image_url         String?
  status            ListingStatus @default(PENDING)
  type              ListingType   @default(SELL)
  material          Material?     @relation(fields: [material_id], references: [id])
  seller            User          @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  isPremiumWorkflow Boolean       @default(false)
  negotiations      Negotiation[]

  @@index([seller_id])
  @@index([material_id])
  @@index([type])
  @@index([status])
  @@index([created_at])
}

model RecyclingCenterClaim {
  id                  String          @id @default(cuid())
  recycling_center_id String
  user_id             String?
  name                String
  email               String
  phone               String?
  companyName         String?
  businessRole        String?
  message             String
  status              String          @default("pending")
  rejection_reason    String?
  documents_json      Json?
  admin_response      String?
  reviewed_by_id      String?
  reviewed_at         DateTime?
  account_created     Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  recyclingCenter     RecyclingCenter @relation(fields: [recycling_center_id], references: [id], onDelete: Cascade)
  user                User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reviewed_by         User?           @relation("ClaimReviewer", fields: [reviewed_by_id], references: [id], onDelete: SetNull)

  @@index([recycling_center_id])
  @@index([user_id])
  @@index([status])
  @@index([reviewed_by_id])
}

model BlogPost {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  excerpt      String?
  content      String
  author_name  String?
  category     String?
  published_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  status       String    @default("draft")
  featured     Boolean   @default(false)
  image_url    String?

  @@index([status])
  @@index([category])
  @@index([published_at])
  @@index([author_name])
}

model WorkingHours {
  id                  String          @id @default(cuid())
  recycling_center_id String
  day_of_week         DayOfWeek
  open_time           String
  close_time          String
  is_closed           Boolean         @default(false)
  recyclingCenter     RecyclingCenter @relation(fields: [recycling_center_id], references: [id], onDelete: Cascade)

  @@unique([recycling_center_id, day_of_week])
}

model Review {
  id         String          @id @default(cuid())
  rating     Int
  comment    String?
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  centerId   String
  userId     String
  center     RecyclingCenter @relation(fields: [centerId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, centerId], name: "UserCenterReview")
  @@index([userId])
  @@index([centerId])
}

model Message {
  id              String   @id @default(cuid())
  senderUserId    String?
  senderName      String?
  senderEmail     String?
  senderPhone     String?
  recipientUserId String?
  centerId        String?
  subject         String
  content         String
  status          String   @default("new")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Negotiation {
  id             String                     @id @default(cuid())
  listingId      String
  buyerId        String
  sellerId       String
  status         NegotiationStatus          @default(INITIATED)
  initiatedAt    DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  expiresAt      DateTime?
  agreedPrice    Float?
  agreedQuantity Float?
  currency       String                     @default("EUR")
  notes          String?
  listing        MarketplaceListing         @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer          User                       @relation("BuyerNegotiations", fields: [buyerId], references: [id], onDelete: Cascade)
  seller         User                       @relation("SellerNegotiations", fields: [sellerId], references: [id], onDelete: Cascade)
  offers         OfferCounter[]
  statusHistory  NegotiationStatusHistory[]
  contract       DealContract?
  escrowAccount  EscrowAccount?

  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
}

model OfferCounter {
  id            String      @id @default(cuid())
  negotiationId String
  senderId      String
  price         Float?
  quantity      Float?
  message       String?
  type          OfferType   @default(COUNTER)
  createdAt     DateTime    @default(now())
  negotiation   Negotiation @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([negotiationId])
  @@index([senderId])
  @@index([type])
}

model NegotiationStatusHistory {
  id            String            @id @default(cuid())
  negotiationId String
  status        NegotiationStatus
  note          String?
  createdById   String?
  createdAt     DateTime          @default(now())
  negotiation   Negotiation       @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  createdBy     User?             @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([negotiationId])
  @@index([status])
  @@index([createdById])
}

model DealContract {
  id             String         @id @default(cuid())
  negotiationId  String         @unique
  status         ContractStatus @default(DRAFT)
  draftTerms     String?
  documentUrl    String?
  buyerSignedAt  DateTime?
  sellerSignedAt DateTime?
  finalizedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  negotiation    Negotiation    @relation(fields: [negotiationId], references: [id], onDelete: Cascade)

  @@index([status])
}

model EscrowAccount {
  id                String              @id @default(cuid())
  negotiationId     String              @unique
  providerReference String?
  status            EscrowStatus        @default(PENDING_SETUP)
  currency          String              @default("EUR")
  expectedAmount    Float?
  fundedAmount      Float               @default(0)
  releasedAmount    Float               @default(0)
  refundedAmount    Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  negotiation       Negotiation         @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  transactions      EscrowTransaction[]

  @@index([status])
}

model EscrowTransaction {
  id              String                @id @default(cuid())
  escrowAccountId String
  type            EscrowTransactionType
  amount          Float
  occurredAt      DateTime              @default(now())
  reference       String?
  metadata        Json?
  escrowAccount   EscrowAccount         @relation(fields: [escrowAccountId], references: [id], onDelete: Cascade)

  @@index([escrowAccountId])
  @@index([type])
  @@index([occurredAt])
}

enum ListingType {
  BUY
  SELL
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
  FLAGGED
}

enum NegotiationStatus {
  INITIATED
  COUNTERING
  AGREED
  CONTRACT_DRAFTING
  CONTRACT_SIGNED
  ESCROW_FUNDED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum OfferType {
  INITIAL
  COUNTER
  FINAL
  SYSTEM
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURES
  SIGNED
  REJECTED
  VOID
}

enum EscrowStatus {
  PENDING_SETUP
  AWAITING_FUNDS
  FUNDED
  RELEASED
  REFUNDED
  DISPUTED
  CLOSED
}

enum EscrowTransactionType {
  FUND
  RELEASE
  REFUND
  ADJUSTMENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum RecyclingDifficulty {
  EASY
  MEDIUM
  HARD
}

enum UserRole {
  USER
  CENTER_OWNER
  ADMIN
}
